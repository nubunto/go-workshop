Go: The Programming Language
A introduction
17 May 2017
Tags: golang, workshop, intro

Bruno Panuto
Software Developer, Daitan
bl.panuto@gmail.com
http://blog.nubunto.co/
@panuto_

* Welcome to Go

This is meant as an introductory workshop/presentation to Go.

We'll take a look at some code, Go's design philosophy and build and play with some demonstrations.

* What we'll be seeing

- Go in production
- How it all started
- Basic syntax and program structures: packages, variables, functions
- The "Less is more" philosophy
- "Object Orientation"
- Interfaces
- Concurrency

* Go in production

: Talk about the companies using Go in production, and what are the challenges they face
: Mention JuJu in special, since it's one of the biggest

These are some of the companies using Go located in the United States

- Google: Kubernetes, YouTube, dl.google.com and [[https://github.com/golang/go/wiki/GoUsers][a lot of other things, actually]]
- BBC: [[https://github.com/bbc/mozart-api-common][source]]
- Canonical: [[https://www.ubuntu.com/cloud/juju][JuJu]], one of the biggest Go projects in the wild.
- Digital Ocean
- Netflix
- New York Times
- Reddit
- SpaceX
- and many, [[https://github.com/golang/go/wiki/GoUsers][many more]]

* Why Go?

Basically, because Rob Pike, Ken Thompson and Robert Griesemer were bored during the compilation of a big C++ project at Google around 2007.

They started from scratch, with C as a reference (rather than C++), and after a few years of iteration in 2009, open-sourced the first version.

Soon after, Go reached 1.0, with the [[https://golang.org/doc/go1compat][Promise of Compatibility]]. As of this writing, Go is at version 1.8.

* In a nutshell

Go is a compiled, garbage collected, strongly typed programming language with built-in support for concurrency.

This means a few things:

- Deployment of your application is done in a very simple manner (upload the binary and you're done)
- Your code is compiled and shipped with the full Go runtime, which manages memory allocation for you with the garbage collector
- Concurrency is supported with control flow primitives from the language

* In a nutshell (tools)

On top of that, Go has a real show of tooling adjacent to the language, including (but not limited to):

- Race detection
- Code formatting
- Source code checking
- Test coverage

We'll demo the use of those tools.

* The GC (and compiler)

The Go GC and the Go compiler are interesting parts, worth mentioning briefly.

The GC is a _concurrent_, tricolor mark-and-sweep. As of Go 1.8, the worst-case for a GC pause is 10ns (yes, 10 nanoseconds).

[[https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/][Here's a animation of it in practice]]

The compiler can actually spit machine-code for various architectures, making cross-platform a breeze (we'll take a look at that too).

Both are written in Go.

* Basic syntax of Go programs

The "Hello World" program, as usual

.play clean.go

: Compile and run this file

Go code is organized in packages, with `main` signalling that this is an executable program.

* Packages

Packages (or modules) are pretty straightforward: pieces of code you can import in your code and use it's exported identifiers.

Packages can contain functions, variables, structs, constants, type definitions, etc. If the identifier starts with an upcase, it is exported.

    package foo

    type unexportedType struct {
        Name string
    }

    var ExportedVariable = true

* Packages (cont.)

If you import this hypothetical `foo` package, your code would be able to refer to `foo.ExportedVariable`, but not `foo.unexportedType`.

    package main

    import "your/package/foo"

    func main() {
        fmt.Println(foo.ExportedVariable) // true
        fmt.Println(foo.unexportedType{Name: "bar"}) // compilation error
    }

* Standard library

Go also ships with a very extensive standard library, which you can use to build your programs without any 3rd party packages.

It covers HTTP, JSON, crypto, TCP, RPC, email, reflection, text (and HTML) templates, and a [[http://golang.org/pkg][whole bunch of other stuff]]

* Variables and assignments

On to some Go code:

.play variables.go /START OMIT/,/END OMIT/

* Functions

.play functions.go /START OMIT/,/END OMIT/

* Multiple returns

.play functions_2.go /START OMIT/,/END OMIT/

* Naked returns

.play functions_3.go /START OMIT/,/END OMIT/

* Structs (and pointers!)

.play structs.go /START OMIT/,/END OMIT/

* Structs (continued)

Structs can have methods associated with them.

    type User struct {
        Name string
        Age  int
        // note that the exported/unexported rule works the same way for structs as well!
    }

    // Save saves the user in a given database
    func (u *User) Save(db *sql.DB) error {
        return db.Exec("INSERT INTO users (name, age) VALUES ($1, $2)", u.Name, u.Age)
    }

And we can use those methods:

    db, _ := sql.Open("postgres", ...)
    u := &User{Name: "Something", Age: 45}
    u.Save(db)

* Error handling

We don't have exceptions in Go. We have multiple returns. Functions that can go wrong often signal this by using two returns:

    res, err := http.Get("http://google.com")
    if err != nil {
        // something went wrong, handle error
        os.Exit(1)
    }
    // do something with the http response

*Always* handle your errors. It is bad practice to ignore them in big programs.
Checking *every* error, at *every* call, has a verbose effect. But we do get some niceties out of that:

- The control flow is explicit (unlike exceptions)
- You really have to think about the error you just catched. What should you do? Log it? Propagate it?
- Errors are values, so you can program them.

* Errors are just values

An error is actually an interface, defined by the standard library:

    type error interface {
        Error() string
    }

It's easy to create custom types that wrap errors, or are errors themselves.

    type statusCodeError struct {
        StatusCode int
    }
    func (m myError) Error() string {
        return fmt.Sprintf("status code: %d", m.StatusCode)
    }
    var error502 error = statusCodeError{ StatusCode: 502 }
    fmt.Println(error502.Error()) // status code: 502

As you can see, errors are just values, at the end of the day, and can be programmed just as any other value.

* Other control flow primitives

We have defer, which are functions that run when the enclosing functions finishes:

.play defer.go /START OMIT/,/END OMIT/

* Other control flow primitives

We have panic, which unwinds the entire stack trace, and usually terminates your program:

.play panic.go /START OMIT/,/END OMIT/

We have a way of recovering from panics with `recover`, but I won't be getting into that.

* Example time

Now we'll take a look at coded-on-the-fly examples:

- Slices (dynamic arrays!)
- Maps
- JSON
- HTTP
- Concurrency!
- Cross-compilation
- The Go tools (gofmt, the race detector)
- you name it

All the code will be available at GitHub for further appreciation.

* Slices

- What are arrays
- What are slices
- How to deal with them

* Maps

- What are maps
- How to deal with them

* JSON and HTTP

- Consume an HTTP API, which uses JSON
- Create an HTTP API, which also uses JSON

* Concurrency

- "Communicating Sequential Processes" by Hoare
- Goroutines
- Channels

* Cross-compilation

Real life example!

* The Go Tools

- Showcasing the race detector
- `gofmt`
- `govet`

* Links

- [[https://github.com/nubunto][My github]]
- [[https://github.com/nubunto/go-workshop][This presentation (and adjacent code)]]

* Questions?
